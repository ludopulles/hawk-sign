/*
 * Tests the sizes involved when computing B * hash and when computing (B^{-1} x)_1
 * 
 * This script gives the std.dev. of all coefficients of
 *     (t0, t1) = B * (h0, h1),
 * and all these coefficients should have an abs. value < Q/2 with overwhelming
 * probability (i.e. failing once in 10^9 signs) such that the lift from Z/QZ
 * to Z works correctly. Here, Q is the prime used in the NTT.
 *
 * Similarly, we report on avg +/- std.dev. of
 *     h1 - 2 s1  = B^{-1} (x0, x1),
 * where (x0, x1) is a sampled coset with support 2Z^{2n} + (t0, t1).
 * Likewise, this quantity should not have coefficients <Q/2 in order to have
 * the lift from Z/QZ to Z work correctly.
 */
#include <cassert>
#include <cstdint>
#include <cstdio>

#include <mutex>
#include <thread>

extern "C" {
	#define restrict
	#include "../inner.h"
}

/* ============================================================================
 * Below is all the code necessary for Zf(uncompressed_verify_NTT).
 * Note that a lot of it is duplicate code with the code in keygen.c
 * ==========================================================================*/

/*
 * Two primes < 2^31 that are 1 mod 2048, together with all the powers of some
 * element g of order 2048 (g^{1024} = -1). Then we have
 *   _gm[rev(i)] = g^i mod PRIME
 *   _igm[rev(i)] = (1/g)^i mod PRIME
 */

static const uint32_t PRIME = 2147473409;

static const uint32_t _gm[1024] = {
	     10239,1211775442, 844192849, 380966363,1642906936, 510722630,1508861108, 414755385,
	2109245776,1087146993, 713248495,1265826808,1080677998,1362297708, 861384770,1704046399,
	1525826314,2040346214,1008798542, 990045356, 425657146, 940916659, 525355434,1220144974,
	1518429642, 360342609, 681555054,1221091429, 753617555,1505582374,1781626431,1362355089,
	1751781058,1503670474, 247865603, 173865709,2110353619,2131459573, 127447701, 239114940,
	 617267406, 448749591, 384326230,1906564718,2106221345, 179473382,1380314908,2102561211,
	 432785183, 801628975,1120628948,1851439414,1288857789,2082055088,1081533174,1031624451,
	 104130137,  20414221, 432819833, 923335543,1338759613, 892318286,1290891920,1017364761,
	  36002698, 708509534, 380358518,1823310344, 537363935,1884620748, 450654243,2025447014,
	 687149602,1854557834,1149922960,1200308092, 942920061,1671455730,1248242243,1371440516,
	 468712057, 837742417, 504714649, 384570634,1382731462, 181209260,1827372862,1922327559,
	 442440464,1740218200,1006242358, 658351655, 192913844, 989789164, 168046222, 611037314,
	2107895877,1768476110, 307090968, 497786428,1602042887,2041925558,1023900675, 363276096,
	1436075093,2018884887,1390973648,1516682538,1632629963, 303454174,  79134887,1248255805,
	  58583500,1427266261,1584996579,1138827852,1359849367, 916439405, 773485398, 700527161,
	1375775427,1311749239, 400642350, 113272554,1776843222, 180652410, 920139840,1859785964,
	 583466347,1509557675, 177601563, 763519245,1533806043,1475595655,1633744151,1699146609,
	1279358270,1140596582,1743446655,1950486424,2002106984,1983766627,1387245836,1160495532,
	1205311157,1686430386, 823547732, 894518914, 618678643,1285853906,2085085575, 996621102,
	1309910078, 368160411,1785021856,1017356205, 760557546,  29755780,1190278574,1609255884,
	1142758706,1366333934,2105509705,1121405167,  61391092, 620605334,1542407506,1085515179,
	1945940088,1452139808,  13813379,1909217707,1496258546, 847505541,1219276327,1787224466,
	1162609347,  85865205, 447467939, 294851667, 184347772,2146747604,2073092060,1886341010,
	 519009783, 867911298,1803216637, 268350358,1101300331,  16822795,1720513678,1333415557,
	 898194720,1340148490,1499505520, 219811299, 350693271,1187228969, 950248169, 679803024,
	1723992616, 939272158, 958873850,1683351501,1432100077, 940544688,1104107542, 808551866,
	2055916433,2108664100,1127573735, 343373448,1267991536, 122094490, 464575848, 311020792,
	 207069494,1346874562, 520565008,1840397553, 916905168,1774333560,2027728486, 525894281,
	1784779199, 107024725,1093245612,1026561681,1062183198, 266560742,2053687302,1233408762,
	1682728276,1063355365, 139739751,2110386679,  73184363, 328292696, 895887944,1006535118,
	1632685417,1802335891, 407686578, 182731865, 831113830, 253522177,1652724996,1261362198,
	 614950335, 558670853,1180201267, 709957599,2139950168,1909331767, 855761909,1536726149,
	1685737800,1302873836,1041680072, 889516160,1404722186,1300563552, 328646981,1879613112,
	1844665594, 834002180, 532194333, 798202943, 654418938, 645421153,1261736554, 795603364,
	 344373277,1568798590, 667610339,1002497615,1630248637, 293661843,1600425477,2039099976,
	1165855232, 509675689,1014006046, 560778883,1728146825,1975446215,1801856698,1371798373,
	  61649618,1680383894,1420154200, 288536768, 454519824, 588661843,1118624769, 173283048,
	 510699217,  11799381, 576276296, 785108592,1638761230, 461574555, 613363350,2085064234,
	 162811327,  22632813,1594550151, 968274199,1402225082, 512621188,1935621155, 305433610,
	1189149610,1041848618,1678938226,  22251669,1505833074,1856089363,  55210454, 617049291,
	 152195421,1482969307, 121223257, 175400221, 788561804,1409092199, 208373922,1503150719,
	 905590624,2099339924,1726934526, 490608969, 971666502, 150104524,1884317549,1421975104,
	1531714930,1110780464, 893166854, 384549288,1757141371,1386909056, 944517816,1767001745,
	1506786929,2004774561,1132145874,   8380668,2045124963, 493622326,2136681329,1383700548,
	 642551345, 964498321,1744724561,  98170524,1585526738,1298626778,1929937396, 645986051,
	 655675705,1949547929,1978909183,1787469359, 999335529,1142896676, 769526595, 340667763,
	 957044362,2042257511, 730865626, 774771027,2102485675, 171632797,1766751439,1979273789,
	  36666292, 483581391,1833884187,1338192126,1881166021, 383585472, 589382997, 844680110,
	1358741468,1527436901,2023093493,1204593935,1234309230, 995377884, 609150156,1918233646,
	1613029282, 297689203,1072050590, 941704499,1119073868,1961565949, 958050648,1779389539,
	1251288897,1440172381,1527064746, 926218156,1913426083, 835556968,2094988831, 268288252,
	 248951729,2132524997,1836682591,1538970563,2035990733, 505016120, 429156433,1414765618,
	1475625721, 943502531, 942683809,1486431004, 523949165,1709054852,1093786037, 526303415,
	 787395686,1721890143,1961248854,1426215768,2024351318,1299811644,1744583208, 457317115,
	1714246102, 613963714,   3700252,1112795255, 700403603, 786047345, 600360113,1724025288,
	 565415073, 505826083,1803513464,1976937507,1637148899,1724912236,2069945137,1092818207,
	 251998493,1097228336,1538816592,2133868705, 124643804, 272277114, 825568049, 139405696,
	1095650222,2121035987,  68383975,1212527119, 940452957,1016776283,  43365217,1534506805,
	1348349006,1663066396,1740016550, 913078586, 575133817,1352735334,2068731429,1528506771,
	1983722035,1843932940,2075871574,2115592672, 139900558,  83743532, 135868355, 414304944,
	1223735551, 871553673, 446423338, 322738569, 482700819,1508906690,1581592256, 361544862,
	 135694878,1147006211, 337625411, 846861313,1331308355,2120754512,   9713916,1825040095,
	1390206652, 210413382,2125294502, 519967958,1720727124,1336818308,1686041362, 424682161,
	1568468320,1875747113,1464045068,2091952259,1828635022,1653477756,1280527114,1853658409,
	1968792473, 601398917,1132237830, 572335236,1736803413, 998090403,2064361528, 307011975,
	1911421248,1368388506, 454592615,1793687542,1146901776,2024249291,  41181831, 312344100,
	 676922102, 625169382,1267896343,1825880845,1228772729,1449330875,1508530636,  15922056,
	 729252878, 405679794, 273764448, 831376914, 623562526, 884538921, 621826379, 596292293,
	1995582791, 684243436, 687523601, 896910770, 622121577,2138515486, 159743608, 922969595,
	1595104654, 944727816, 333787879,1031211337,1997488014, 407284061,1528316051, 474216475,
	1586436886,1682011672, 832836475, 218797698,1824060900,1548663944, 539492781, 360557475,
	1800786486,1453636396, 523069489, 391874117,2068020798,1636189101, 614256898,1378239567,
	  79200507, 748044362, 309088755,2140104334,1559155553,1865792554, 627832514,1595567198,
	  89315992, 563238059,1957040581, 753467359, 472502743, 259040379,2034063691, 416404452,
	1517134842,1222933211,1782541942,1059536659,1802473242, 340156123,2112296092, 284093981,
	 316178045,1650529998,1424521788,  87363732, 219107362, 454531548, 541941034, 964641620,
	 214165283, 951524190, 816965566, 615149116, 419253916, 699914672,1974100984, 557035399,
	 369770014, 754957505,1219481381, 743750305,1278429392, 351174371,1446452342,1670293817,
	1808263263, 743213622,  70951646, 225803398, 316522708, 259632654, 501564200, 737740770,
	1116058501,1564309019,1863616279, 697465394, 808452557,2006458495,1347651787, 459092780,
	 294871957,1090775116,1373753670,1682510517,1198977170, 152500606, 249004218,   6543534,
	1350751910,1646017987, 372361508,1026606845,2061946490, 366223620, 553848712, 100285293,
	1222647857, 164634924,1520228377,1725184997,1943212908, 457358387, 508117577, 521078506,
	 550187930, 515012039,1493066980,  38853673,1981955462,1129763162,1840305085,1164903522,
	1383861961,1546063272,2038625878,  49802431,1742987600, 248830716, 215452565,1124550164,
	 358970387, 810278662,1017455780, 126529700, 551038382, 235795751,1495797364, 815081456,
	 605036630,1987694228,1664977678, 737556278, 600124015,1281844671, 266442612,1111014282,
	1142985306,1241910505,1625569928, 399356465, 142867422, 747939530,1600303628,1400267995,
	1771296899,1055258873,2052928912,1090787526, 372964345, 362927208,1091927141, 432741548,
	 316370380,1835246978, 433897481,  82254432,1992690074,1944916782, 118846818, 664699758,
	1988643670,  65853134,1626822455, 333172150, 725381383, 562213096, 506016833, 299810586,
	 118525426, 303337374, 171327776,  26713826,2019537437, 521306279,1199312441,1504153942,
	 149783903, 572842664,1208201313,2038801298,1936840969,1917068310, 369758600, 989296711,
	1512551716, 981629617,2085868734, 204379666,2006546354,1674395336, 184179730,  64989735,
	 216949439,1405692371, 479925496, 877152322,1936628869, 781626880, 922285903,1441486284,
	 204004983,1910421272,1078812488,1352599241,1424876035,1015933921, 631003086, 200854305,
	1823164499,1762425506, 319476775, 162683438,1372643149, 340974367,1898947515, 127367168,
	1947428753, 645771770,1644249909, 545805129, 196314747,1927973001,2124935557,1021791326,
	1958204163, 240999256,1567760415, 861815805, 222139591, 639931839, 317932896, 965877355,
	1447020149,1380001797, 646585246,1981932492, 663532681,1697718565,1195820371,1375823134,
	1931600886,  63233259,1575314303, 362001141, 748554342, 629977843, 439604348,1733840244,
	2033987436, 672880374,2109196412,2108534276,1748393598,1558708441,1497730436, 902561816,
	 516236031,2116949179,1680500329,1697163516, 418982956,2107611671, 312576069,1118310174,
	1922031495, 753857816, 940780498,1080683561, 274726633,1712130342, 988187652, 170230212,
	 295907756,1397878742,1155365535, 432062235, 352391100, 255435148,1243923685,1834074872,
	1649942772,1680778438, 237681157,1905824844, 313707335, 212325352,1932012258,1415566564,
	2102610109, 635475325, 927021013,1685615242,2002112026,1122406791, 599704611,1126195848,
	1867097811, 936037270,  58489307,1489098433, 898930788,2026853100,1399996178, 443605152,
	1926908365, 419386773, 965194769, 803024130,1835872967,1858960871,1194983444, 224414329,
	1274447749, 814702687,1523027357,2079704210,  76982505, 546638809,1783664192, 371771357,
	1410401016,1702401800,1636708334,1081059658,1156900209,  65075822, 233514419, 776558131,
	 646854602, 742630529,1960648935,1735353162, 793046056,1566379973,1785037788, 378316154,
	1623158941,2046867185, 904735813,1304568919,1085855983, 540414288,   7274646, 904450306,
	1369750803, 298848800,1495928357,1747074847,1529518256,1829891069,1113160993,1635689490,
	 206765130, 161790346, 758724588,2027518062, 194120787,1880179270, 315306206,1679480825,
	1749762293,1479988889,1058424779,1613439111,1538486362,1024151346,1698191548,1653754367,
	1428600388,1612090301, 904428853,1693361054,2076676992,1567754993, 255132195, 777827475,
	1965894978,1362247682, 982762236,1611194546,1501940668, 577062012, 472172169, 727762708,
	 609697494,  12095470,1834931851,2038375771, 487876930, 246483965,1389889743,1552655655,
	1369071755,2065876994,1691311821,2034922378,2145486251, 926245675, 539586486,1838729797,
	1268928391, 266846482, 271595736,1795958107, 845111775,1138779333, 752208778, 967167055,
	1191834611,  54480127,1759311590,2047429647,1275547582, 257925953, 399506788,1304256361,
	 334295217, 379038211,1954294368, 792901565,1236319226,1452336121,1393585513,2006023849,
	1593021737, 977954576, 457092625, 434323556, 697849388,1307987755, 774239444, 399511181,
	1828103853,1283750689,1015686530, 159313948, 622276755,  70904888,2107757872,1947504257,
	 715972420, 765466287,1327423332, 575380119, 765641407, 451336159,1055124865,1592222182,
	1218023510,1835656610, 475930307, 170836896, 712535461, 463687662,1261089329,1422738200,
	2015392116, 903005181, 840388835,1935832642,1597551736, 729216766, 580629496, 680653672
};

static const uint32_t _igm[1024] = {
	     10239, 935697967,1766507046,1303280560,1732718024, 638612301,1636750779, 504566473,
	 443427010,1286088639, 785175701,1066795411, 881646601,1434224914,1060326416,  38227633,
	 785118320, 365846978, 641891035,1393855854, 926381980,1465918355,1787130800, 629043767,
	 927328435,1622117975,1206556750,1721816263,1157428053,1138674867, 107127195, 621647095,
	1130108648, 856581489,1255155123, 808713796,1224137866,1714653576,2127059188,2043343272,
	1115848958,1065940235,  65418321, 858615620, 296033995,1026844461,1345844434,1714688226,
	  44912198, 767158501,1968000027,  41252064, 240908691,1763147179,1698723818,1530206003,
	1908358469,2020025708,  16013836,  37119790,1973607700,1899607806, 643802935, 395692351,
	 287687445,1227333569,1966820999, 370630187,2034200855,1746831059, 835724170, 771697982,
	1446946248,1373988011,1231034004, 787624042,1008645557, 562476830, 720207148,2088889909,
	 899217604,2068338522,1844019235, 514843446, 630790871, 756499761, 128588522, 711398316,
	1784197313,1123572734, 105547851, 545430522,1649686981,1840382441, 378997299,  39577532,
	1536436095,1979427187,1157684245,1954559565,1489121754,1141231051, 407255209,1705032945,
	 225145850, 320100547,1966264149, 764741947,1762902775,1642758760,1309730992,1678761352,
	 776032893, 899231166, 476017679,1204553348, 947165317, 997550449, 292915575,1460323807,
	 122026395,1696819166, 262852661,1610109474, 324163065,1767114891,1438963875,2111470711,
	 610747260,1291711500, 238141642,   7523241,1437515810, 967272142,1588802556,1532523074,
	 886111211, 494748413,1893951232,1316359579,1964741544,1739786831, 345137518, 514787992,
	1140938291,1251585465,1819180713,2074289046,  37086730,2007733658,1084118044, 464745133,
	 914064647,  93786107,1880912667,1085290211,1120911728,1054227797,2040448684, 362694210,
	1621579128, 119744923, 373139849,1230568241, 307075856,1626908401, 800598847,1940403915,
	1836452617,1682897561,2025378919, 879481873,1804099961,1019899674,  38809309,  91556976,
	1338921543,1043365867,1206928721, 715373332, 464121908,1188599559,1208201251, 423480793,
	1467670385,1197225240, 960244440,1796780138,1927662110, 647967889, 807324919,1249278689,
	 814057852, 426959731,2130650614,1046173078,1879123051, 344256772,1279562111,1628463626,
	 261132399,  74381349,    725805,1963125637,1852621742,1700005470,2061608204, 984864062,
	 360248943, 928197082,1299967868, 651214863, 238255702,2133660030, 695333601, 201533321,
	1061958230, 605065903,1526868075,2086082317,1026068242,  41963704, 781139475,1004714703,
	 538217525, 957194835,2117717629,1386915863,1130117204, 362451553,1779312998, 837563331,
	1150852307,  62387834, 861619503,1528794766,1252954495,1323925677, 461043023, 942162252,
	 986977877, 760227573, 163706782, 145366425, 196986985, 404026754,1006876827, 868115139,
	 448326800, 513729258, 671877754, 613667366,1383954164,1969871846, 637915734,1564007062,
	 293815000, 866946295, 493995653, 318838387,  55521150, 683428341, 271726296, 579005089,
	1722791248, 461432047, 810655101, 426746285,1627505451,  22178907,1937060027, 757266757,
	 322433314,2137759493,  26718897, 816165054,1300612096,1809847998,1000467198,2011778531,
	1785928547, 565881153, 638566719,1664772590,1824734840,1701050071,1275919736, 923737858,
	1733168465,2011605054,2063729877,2007572851,  31880737,  71601835, 303540469, 163751374,
	 618966638,  78741980, 794738075,1572339592,1234394823, 407456859, 484407013, 799124403,
	 612966604,2104108192,1130697126,1207020452, 934946290,2079089434,  26437422,1051823187,
	2008067713,1321905360,1875196295,2022829605,  13604704, 608656817,1050245073,1895474916,
	1054655202,  77528272, 422561173, 510324510, 170535902, 343959945,1641647326,1582058336,
	 423448121,1547113296,1361426064,1447069806,1034678154,2143773157,1533509695, 433227307,
	1690156294, 402890201, 847661765, 123122091, 721257641, 186224555, 425583266,1360077723,
	1621169994,1053687372, 438418557,1623524244, 661042405,1204789600,1203970878, 671847688,
	 732707791,1718316976,1642457289, 111482676, 608502846, 310790818,  14948412,1898521680,
	1879185157,  52484578,1311916441, 234047326,1221255253, 620408663, 707301028, 896184512,
	 368083870,1189422761, 185907460,1028399541,1205768910,1075422819,1849784206, 534444127,
	 229239763,1538323253,1152095525, 913164179, 942879474, 124379916, 620036508, 788731941,
	1302793299,1558090412,1763887937, 266307388, 809281283, 313589222,1663892018,2110807117,
	 168199620, 380721970,1975840612,  44987734,1372702382,1416607783, 105215898,1190429047,
	1806805646,1377946814,1004576733,1148137880, 360004050, 168564226, 197925480,1491797704,
	1501487358, 217536013, 848846631, 561946671,2049302885, 402748848,1182975088,1504922064,
	 763772861,  10792080,1653851083, 102348446,2139092741,1015327535, 142698848, 640686480,
	 380471664,1202955593, 760564353, 390332038,1762924121,1254306555,1036692945, 615758479,
	 725498305, 263155860,1997368885,1175806907,1656864440, 420538883,  48133485,1241882785,
	 644322690,1939099487, 738381210,1358911605,1972073188,2026250152, 664504102,1995277988,
	1530424118,2092262955, 291384046, 641640335,2125221740, 468535183,1105624791, 958323799,
	1842039799, 211852254,1634852221, 745248327,1179199210, 552923258,2124840596,1984662082,
	  62409175,1534110059,1685898854, 508712179,1362364817,1571197113,2135674028,1636774192,
	1974190361,1028848640,1558811566,1692953585,1858936641, 727319209, 467089515,2085823791,
	 775675036, 345616711, 172027194, 419326584,1586694526,1133467363,1637797720, 981618177,
	 108373433, 547047932,1853811566, 517224772,1144975794,1479863070, 578674819,1803100132,
	1351870045, 885736855,1502052256,1493054471,1349270466,1615279076,1313471229, 302807815,
	 267860297,1818826428, 846909857, 742751223,1257957249,1105793337, 844599573, 461735609,
	1466819737,1566843913,1418256643, 549921673, 211640767,1307084574,1244468228, 132081293,
	 724735209, 886384080,1683785747,1434937948,1976636513,1671543102, 311816799, 929449899,
	 555251227,1092348544,1696137250,1381832002,1572093290, 820050077,1382007122,1431500989,
	 199969152,  39715537,2076568521,1525196654,1988159461,1131786879, 863722720, 319369556,
	1747962228,1373233965, 839485654,1449624021,1713149853,1690380784,1169518833, 554451672,
	 141449560, 753887896, 695137288, 911154183,1354571844, 193179041,1768435198,1813178192,
	 843217048,1747966621,1889547456, 871925827, 100043762, 388161819,2092993282, 955638798,
	1180306354,1395264631,1008694076,1302361634, 351515302,1875877673,1880626927, 878545018,
	 308743612,1607886923,1221227734,   1987158, 112551031, 456161588,  81596415, 778401654,
	 594817754, 757583666,1900989444,1659596479, 109097638, 312541558,2135377939,1537775915,
	1419710701,1675301240,1570411397, 645532741, 536278863,1164711173, 785225727, 181578431,
	1369645934,1892341214, 579718416,  70796417, 454112355,1243044556, 535383108, 718873021,
	 493719042, 449281861,1123322063, 608987047, 534034298,1089048630, 667484520, 397711116,
	 467992584,1832167203, 267294139,1953352622, 119955347,1388748821,1985683063,1940708279,
	 511783919,1034312416, 317582340, 617955153, 400398562, 651545052,1848624609, 777722606,
	1243023103,2140198763,1607059121,1061617426, 842904490,1242737596, 100606224, 524314468,
	1769157255, 362435621, 581093436,1354427353, 412120247, 186824474,1404842880,1500618807,
	1370915278,1913958990,2082397587, 990573200,1066413751, 510765075, 445071609, 737072393,
	1775702052, 363809217,1600834600,2070490904,  67769199, 624446052,1332770722, 873025660,
	1923059080, 952489965, 288512538, 311600442,1344449279,1182278640,1728086636, 220565044,
	1703868257, 747477231, 120620309,1248542621, 658374976,2088984102,1211436139, 280375598,
	1021277561,1547768798,1025066618, 145361383, 461858167,1220452396,1511998084,  44863300,
	 731906845, 215461151,1935148057,1833766074, 241648565,1909792252, 466694971, 497530637,
	 313398537, 903549724,1892038261,1795082309,1715411174, 992107874, 749594667,1851565653,
	1977243197,1159285757, 435343067,1872746776,1066789848,1206692911,1393615593, 225441914,
	1029163235,1834897340,  39861738,1728490453, 450309893, 466973080,  30524230,1631237378,
	1244911593, 649742973, 588764968, 399079811,  38939133,  38276997,1474593035, 113485973,
	 413633165,1707869061,1517495566,1398919067,1785472268, 572159106,2084240150, 215872523,
	 771650275, 951653038, 449754844,1483940728, 165540917,1500888163, 767471612, 700453260,
	1181596054,1829540513,1507541570,1925333818,1285657604, 579712994,1906474153, 189269246,
	1125682083,  22537852, 219500408,1951158662,1601668280, 503223500,1501701639, 200044656,
	2020106241, 248525894,1806499042, 774830260,1984789971,1827996634, 385047903, 324308910,
	1946619104,1516470323,1131539488, 722597374, 794874168,1068660921, 237052137,1943468426,
	 705987125,1225187506,1365846529, 210844540,1270321087,1667547913, 741781038,1930523970,
	2082483674,1963293679, 473078073, 140927055,1943093743,  61604675,1165843792, 634921693,
	1158176698,1777714809, 230405099, 210632440, 108672111, 939272096,1574630745,1997689506,
	 643319467, 948160968,1626167130, 127935972,2120759583,1976145633,1844136035,2028947983,
	1847662823,1641456576,1585260313,1422092026,1814301259, 520650954,2081620275, 158829739,
	1482773651,2028626591, 202556627, 154783335,2065218977,1713575928, 312226431,1831103029,
	1714731861,1055546268,1784546201,1774509064,1056685883,  94544497,1092214536, 376176510,
	 747205414, 547169781,1399533879,2004605987,1748116944, 521903481, 905562904,1004488103,
	1036459127,1881030797, 865628738,1547349394,1409917131, 482495731, 159779181,1542436779,
	1332391953, 651676045,1911677658,1596435027,2020943709,1130017629,1337194747,1788503022,
	1022923245,1932020844,1898642693, 404485809,2097670978, 108847531, 601410137, 763611448,
	 982569887, 307168324,1017710247, 165517947,2108619736, 654406429,1632461370,1597285479,
	1626394903,1639355832,1690115022, 204260501, 422288412, 627245032,1982838485, 924825552,
	2047188116,1593624697,1781249789,  85526919,1120866564,1775111901, 501455422, 796721499,
	2140929875,1898469191,1994972803, 948496239, 464962892, 773719739,1056698293,1852601452,
	1688380629, 799821622, 141014914,1339020852,1450008015, 283857130, 583164390,1031414908,
	1409732639,1645909209,1887840755,1830950701,1921670011,2076521763,1404259787, 339210146,
	 477179592, 701021067,1796299038, 869044017,1403723104, 927992028,1392515904,1777703395,
	1590438010, 173372425,1447558737,1728219493,1532324293,1330507843,1195949219,1933308126,
	1182831789,1605532375,1692941861,1928366047,2060109677, 722951621, 496943411,1831295364,
	1863379428,  35177317,1807317286, 345000167,1087936750, 364931467, 924540198, 630338567,
	1731068957, 113409718,1888433030,1674970666,1394006050, 190432828,1584235350,2058157417,
	 551906211,1519640895, 281680855, 588317856,   7369075,1838384654,1399429047,2068272902,
	 769233842,1533216511, 511284308,  79452611,1755599292,1624403920, 693837013, 346686923,
	1786915934,1607980628, 598809465, 323412509,1928675711,1314636934, 465461737, 561036523,
	1673256934, 619157358,1740189348, 149985395,1116262072,1813685530,1202745593, 552368755,
	1224503814,1987729801,   8957923,1525351832,1250562639,1459949808,1463229973, 151890618,
	1551181116,1525647030,1262934488,1523910883,1316096495,1873708961,1741793615,1418220531,
	2131551353, 638942773, 698142534, 918700680, 321592564, 879577066,1522304027,1470551307,
	1835129309,2106291578, 123224118,1000571633, 353785867,1692880794, 779084903, 236052161,
	1840461434,  83111881,1149383006, 410669996,1575138173,1015235579,1546074492, 178680936
};

/*
 * Reduce a small signed integer modulo a small prime. The source
 * value x MUST be such that -p < x < p.
 */
static inline uint32_t
modp_set(int32_t x, uint32_t p)
{
	uint32_t w;

	w = (uint32_t)x;
	w += p & -(w >> 31);
	return w;
}

/*
 * Normalize a modular integer around 0.
 */
static inline int32_t
modp_norm(uint32_t x, uint32_t p)
{
	return (int32_t)(x - (p & (((x - ((p + 1) >> 1)) >> 31) - 1)));
}

/*
 * Compute -1/p mod 2^31. This works for all odd integers p that fit
 * on 31 bits.
 */
static uint32_t
modp_ninv31(uint32_t p)
{
	uint32_t y;

	y = 2 - p;
	y *= 2 - p * y;
	y *= 2 - p * y;
	y *= 2 - p * y;
	y *= 2 - p * y;
	return (uint32_t)0x7FFFFFFF & -y;
}

/*
 * Compute R = 2^31 mod p.
 */
static inline uint32_t
modp_R(uint32_t p)
{
	/*
	 * Since 2^30 < p < 2^31, we know that 2^31 mod p is simply
	 * 2^31 - p.
	 */
	return ((uint32_t)1 << 31) - p;
}

/*
 * Addition modulo p.
 */
static inline uint32_t
modp_add(uint32_t a, uint32_t b, uint32_t p)
{
	uint32_t d;

	d = a + b - p;
	d += p & -(d >> 31);
	return d;
}

/*
 * Subtraction modulo p.
 */
static inline uint32_t
modp_sub(uint32_t a, uint32_t b, uint32_t p)
{
	uint32_t d;

	d = a - b;
	d += p & -(d >> 31);
	return d;
}

/*
 * Montgomery multiplication modulo p. The 'p0i' value is -1/p mod 2^31.
 * It is required that p is an odd integer.
 */
static inline uint32_t
modp_montymul(uint32_t a, uint32_t b, uint32_t p, uint32_t p0i)
{
	uint64_t z, w;
	uint32_t d;

	z = (uint64_t)a * (uint64_t)b;
	w = ((z * p0i) & (uint64_t)0x7FFFFFFF) * p;
	d = (uint32_t)((z + w) >> 31) - p;
	d += p & -(d >> 31);
	return d;
}

/*
 * Compute R2 = 2^62 mod p.
 */
static uint32_t
modp_R2(uint32_t p, uint32_t p0i)
{
	uint32_t z;

	/*
	 * Compute z = 2^31 mod p (this is the value 1 in Montgomery
	 * representation), then double it with an addition.
	 */
	z = modp_R(p);
	z = modp_add(z, z, p);

	/*
	 * Square it five times to obtain 2^32 in Montgomery representation
	 * (i.e. 2^63 mod p).
	 */
	z = modp_montymul(z, z, p, p0i);
	z = modp_montymul(z, z, p, p0i);
	z = modp_montymul(z, z, p, p0i);
	z = modp_montymul(z, z, p, p0i);
	z = modp_montymul(z, z, p, p0i);

	/*
	 * Halve the value mod p to get 2^62.
	 */
	z = (z + (p & -(z & 1))) >> 1;
	return z;
}


static inline uint32_t
modp_inv(uint32_t a, uint32_t p)
{
	uint32_t b;
	int64_t x, xx, q, t;

	b = p;
	x = 1;
	xx = 0;

	while (b) {
		q = a / b;

		// x -= a / b * xx; swap(x, xx);
		t = x - q * xx;
		x = xx;
		xx = t;

		// a %= b; swap(a, b);
		t = a - q * b;
		a = b;
		b = t;
	}

	return modp_set(x, p);
}

/*
 * Division modulo p. If the divisor (b) is 0, then 0 is returned.
 * This function computes proper results only when p is prime.
 *
 * Note: p should be public variable, i.e. the runtime depends on p.
 *
 * Parameters:
 *   a     dividend
 *   b     divisor
 *   p     odd prime modulus
 *   p0i   -1/p mod 2^31
 *   R     2^31 mod p
 */
static inline uint32_t
modp_div(uint32_t a, uint32_t b, uint32_t p, uint32_t p0i)
{
	return modp_montymul(a, modp_inv(modp_montymul(b, 1, p, p0i), p), p, p0i);
}

/*
 * Compute the NTT over a polynomial a (binary case).
 */
static void
modp_NTT2(uint32_t *a, const uint32_t *gm, unsigned logn,
	uint32_t p, uint32_t p0i)
{
	size_t t, m, n;

	if (logn == 0) {
		return;
	}
	n = MKN(logn);
	t = n;
	for (m = 1; m < n; m <<= 1) {
		size_t ht, u, v1;

		ht = t >> 1;
		for (u = 0, v1 = 0; u < m; u ++, v1 += t) {
			uint32_t s;
			size_t v;
			uint32_t *r1, *r2;

			s = gm[m + u];
			r1 = a + v1;
			r2 = r1 + ht;
			for (v = 0; v < ht; v ++, r1 ++, r2 ++) {
				uint32_t x, y;

				x = *r1;
				y = modp_montymul(*r2, s, p, p0i);
				*r1 = modp_add(x, y, p);
				*r2 = modp_sub(x, y, p);
			}
		}
		t = ht;
	}
}

/*
 * Compute the inverse NTT over a polynomial (binary case).
 */
static void
modp_iNTT2(uint32_t *a, const uint32_t *igm, unsigned logn,
	uint32_t p, uint32_t p0i)
{
	size_t t, m, n, k;
	uint32_t ni;
	uint32_t *r;

	if (logn == 0) {
		return;
	}
	n = MKN(logn);
	t = 1;
	for (m = n; m > 1; m >>= 1) {
		size_t hm, dt, u, v1;

		hm = m >> 1;
		dt = t << 1;
		for (u = 0, v1 = 0; u < hm; u ++, v1 += dt) {
			uint32_t s;
			size_t v;
			uint32_t *r1, *r2;

			s = igm[hm + u];
			r1 = a + v1;
			r2 = r1 + t;
			for (v = 0; v < t; v ++, r1 ++, r2 ++) {
				uint32_t x, y;

				x = *r1;
				y = *r2;
				*r1 = modp_add(x, y, p);
				*r2 = modp_montymul(modp_sub(x, y, p), s, p, p0i);
			}
		}
		t = dt;
	}

	/*
	 * We need 1/n in Montgomery representation, i.e. R/n. Since
	 * 1 <= logn <= 10, R/n is an integer; morever, R/n <= 2^30 < p,
	 * thus a simple shift will do.
	 */
	ni = (uint32_t)1 << (31 - logn);
	for (k = 0, r = a; k < n; k ++, r ++) {
		*r = modp_montymul(*r, ni, p, p0i);
	}
}

static void
int8_to_ntt(uint32_t *a, const int8_t *x, const uint32_t *gm,
	uint32_t p, uint32_t p0i, unsigned logn)
{
	size_t n, u;

	n = MKN(logn);
	for (u = 0; u < n; u++) {
		a[u] = modp_set(x[u], p);
	}

	modp_NTT2(a, gm, logn, p, p0i);
}

/*
 * Set the polynomial a equal to h - 2 * s and converts it to Montgomery NTT
 * representation.
 */
static void
hash_to_ntt(uint32_t *a, const uint8_t *h, const uint32_t *gm, uint32_t R2,
	uint32_t p, uint32_t p0i, unsigned logn)
{
	size_t n, u, v;
	int32_t hash;

	n = MKN(logn);
	if (logn <= 3) {
		hash = h[0];
		for (u = 0; u < n; u ++) {
			a[u] = modp_set(((hash >> u) & 1), p);
		}
	} else {
		for (u = 0; u < n; ) {
			hash = *h++;
			for (v = 0; v < 8; v ++, u ++) {
				a[u] = modp_set((hash & 1), p);
				hash >>= 1;
			}
		}
	}

	modp_NTT2(a, gm, logn, p, p0i);
	for (u = 0; u < n; u++) {
		a[u] = modp_montymul(a[u], R2, p, p0i);
	}
}


/*
 * Discrete Gaussian Sampler
 *
 * The table below contains the cumulative probability table for two discrete
 * gaussian distribution. The first is a discrete gaussian on 2Z with standard
 * deviation 2 sigma, and the other is a discrete gaussian on 2Z + 1 with the
 * same standard deviation.  For n = 512, we have sigma = 1.278.
 *
 * The elements in the even indices of the table (starting from zero) contain
 * the probabilities P(|X| >= 2), P(|X| >= 4), etc. when X is sampled from
 * D_{2Z, 2sigma}, and the number is scaled by a factor of 2^{78}, and then the
 * highest 15 bits are stored in gauss_hi while the lowest 63 bits are stored
 * in gauss_lo. Similarly the odd indices in the table contain P(|X| >= 3),
 * P(|X| >= 5), etc.
 *
 * The generation is contant-time so the whole probability is read fully such
 * that the time consumption does not depend on the coset that is sampled from
 * nor on the outcome of the sampling.
 *
 * To generate the values, run `sage code/renyi.sage`.
 */

/*
 * Precomputed CDT with 78 bits of precision.
 * RD_{513}(sign_sampler, mu=0/2) = 1 + 1.334079E-24 < 1 + 2^-79
 * RD_{513}(sign_sampler, mu=1/2) = 1 + 1.449739E-24 < 1 + 2^-79
 */
static const uint16_t gauss_hi_512[10] = {
	0x580B, 0x35F9,
	0x1D34, 0x0DD7,
	0x05B7, 0x020C,
	0x00A2, 0x002B,
	0x000A, 0x0001,
};
static const uint64_t gauss_lo_512[26] = {
	0x0C27920A04F8F267, 0x3C689D9213449DC9,
	0x1C4FF17C204AA058, 0x7B908C81FCE3524F,
	0x5E63263BE0098FFD, 0x4EBEFD8FF4F07378,
	0x56AEDFB0876A3BD8, 0x4628BC6B23887196,
	0x061E21D588CC61CC, 0x7F769211F07B326F,
	0x2BA568D92EEC18E7, 0x0668F461693DFF8F,
	0x00CF0F8687D3B009, 0x001670DB65964485,
	0x000216A0C344EB45, 0x00002AB6E11C2552,
	0x000002EDF0B98A84, 0x0000002C253C7E81,
	0x000000023AF3B2E7, 0x0000000018C14ABF,
	0x0000000000EBCC6A, 0x000000000007876E,
	0x00000000000034CF, 0x000000000000013D,
	0x0000000000000006, 0x0000000000000000,
};

/*
 * Precomputed CDT with 78 bits of precision.
 * RD_{513}(sign_sampler, mu=0/2) = 1 + 3.446518E-25 < 1 + 2^-81
 * RD_{513}(sign_sampler, mu=1/2) = 1 + 2.235739E-24 < 1 + 2^-78
 */
static const uint16_t gauss_hi_1024[10] = {
	0x58B0, 0x36FE,
	0x1E3A, 0x0EA0,
	0x0632, 0x024A,
	0x00BC, 0x0034,
	0x000C, 0x0002,
};
static const uint64_t gauss_lo_1024[26] = {
	0x3AAA2EB76504E560, 0x01AE2B17728DF2DE,
	0x70E1C03E49BB683E, 0x6A00B82C69624C93,
	0x55CDA662EF2D1C48, 0x2685DB30348656A4,
	0x31E874B355421BB7, 0x430192770E205503,
	0x57C0676C029895A7, 0x5353BD4091AA96DB,
	0x3D4D67696E51F820, 0x09915A53D8667BEE,
	0x014A1A8A93F20738, 0x0026670030160D5F,
	0x0003DAF47E8DFB21, 0x0000557CD1C5F797,
	0x000006634617B3FF, 0x0000006965E15B13,
	0x00000005DBEFB646, 0x0000000047E9AB38,
	0x0000000002F93038, 0x00000000001B2445,
	0x000000000000D5A7, 0x00000000000005AA,
	0x0000000000000021, 0x0000000000000000,
};

static inline int8_t
mkgauss_sign_512(prng *rng, uint8_t parity)
{
	uint16_t r_hi, p_hi;
	uint64_t r_lo, p_lo;
	uint8_t c, v, k, neg;

	/*
	 * We use 80 random bits to determine the value, by looking in the
	 * cumulative probability table. However, we only use 15 bits for r_hi so
	 * we can check if r_hi < p_hi holds by computing (r_hi - p_hi) >> 15. This
	 * way is better than doing a comparison to achieve constant-time
	 * execution.
	 */
	prng_get_80_bits(rng, &r_hi, &r_lo);

	/*
	 * Get the sign bit out of the lowest part
	 */
	neg = (uint8_t)(r_lo >> 63);

	/*
	 * Unset the sign bits in the unsigned ints for convenience in comparisons
	 * later on, as we can now use the highest bit of `a - b` to check if `a <
	 * b` or not for numbers `a, b`.
	 */
	r_hi &= ~((uint16_t)1u << 15);
	r_lo &= ~((uint64_t)1u << 63);

	v = 0;
	for (k = 10; k < 26; k += 2) {
		/*
		 * Constant-time for:
		 *     p_lo = gauss_lo[k + parity];
		 */
		p_lo = (gauss_lo_512[k] & (parity - 1u)) | ((gauss_lo_512[k + 1] & -parity));

		/*
		 * Add 1 iff r_lo < p_lo.
		 */
		v += (uint8_t)((uint64_t)(r_lo - p_lo) >> 63);
	}

	/*
	 * If r_hi > 0, set v to zero, otherwise leave v as is. This is a
	 * micro-optimization as p_hi would be zero for all k >= 5.
	 */
	v = v & -((r_hi - 1) >> 15);

	for (k = 0; k < 10; k += 2) {
		/*
		 * Constant-time for:
		 *     p_lo = gauss_lo_512[k + parity];
		 *     p_hi = gauss_hi_512[k + parity];
		 */
		p_lo = (gauss_lo_512[k] & (parity - 1u)) | ((gauss_lo_512[k + 1] & -parity));
		p_hi = (gauss_hi_512[k] & (parity - 1u)) | ((gauss_hi_512[k + 1] & -parity));

		/*
		 * c = [[ r_lo < p_lo ]]
		 */
		c = (uint8_t)((uint64_t)(r_lo - p_lo) >> 63);

		/*
		 * Constant-time code to add 1 to v iff
		 *     r_hi < p_hi or (r_hi == p_hi and c is true)
		 * holds.
		 */
		c = (uint8_t)((uint16_t)(r_hi - p_hi - c) >> 15);
		v += c;
	}

	/*
	 * Multiply by two and apply the change in support:
	 * If parity = 0, then v = 0,2,4,...
	 * If parity = 1, then v = 1,3,5,...
	 */
	v = (v << 1) | parity;

	/*
	 * Apply the sign ('neg' flag). If neg = 0, this has no effect.
	 * However, if neg = 1, this changes v into -v = (~v) + 1.
	 */
	v = (v ^ -neg) + neg;
	return *(int8_t *)&v;
}

static inline int8_t
mkgauss_sign_1024(prng *rng, uint8_t parity)
{
	uint16_t r_hi, p_hi;
	uint64_t r_lo, p_lo;
	uint8_t c, v, k, neg;

	/*
	 * We use 80 random bits to determine the value, by looking in the
	 * cumulative probability table. However, we only use 15 bits for r_hi so
	 * we can check if r_hi < p_hi holds by computing (r_hi - p_hi) >> 15. This
	 * way is better than doing a comparison to achieve constant-time
	 * execution.
	 */
	prng_get_80_bits(rng, &r_hi, &r_lo);

	/*
	 * Get the sign bit out of the lowest part
	 */
	neg = (uint8_t)(r_lo >> 63);

	/*
	 * Unset the sign bits in the unsigned ints for convenience in comparisons
	 * later on, as we can now use the highest bit of `a - b` to check if `a <
	 * b` or not for numbers `a, b`.
	 */
	r_hi &= ~((uint16_t)1u << 15);
	r_lo &= ~((uint64_t)1u << 63);

	v = 0;
	for (k = 10; k < 26; k += 2) {
		/*
		 * Constant-time for:
		 *     p_lo = gauss_lo[k + parity];
		 */
		p_lo = (gauss_lo_1024[k] & (parity - 1u)) | ((gauss_lo_1024[k + 1] & -parity));

		/*
		 * Add 1 iff r_lo < p_lo.
		 */
		v += (uint8_t)((uint64_t)(r_lo - p_lo) >> 63);
	}

	/*
	 * If r_hi > 0, set v to zero, otherwise leave v as is. This is a
	 * micro-optimization as p_hi would be zero for all k >= 5.
	 */
	v = v & -((r_hi - 1) >> 15);

	for (k = 0; k < 10; k += 2) {
		/*
		 * Constant-time for:
		 *     p_lo = gauss_lo_1024[k + parity];
		 *     p_hi = gauss_hi_1024[k + parity];
		 */
		p_lo = (gauss_lo_1024[k] & (parity - 1u)) | ((gauss_lo_1024[k + 1] & -parity));
		p_hi = (gauss_hi_1024[k] & (parity - 1u)) | ((gauss_hi_1024[k + 1] & -parity));

		/*
		 * c = [[ r_lo < p_lo ]]
		 */
		c = (uint8_t)((uint64_t)(r_lo - p_lo) >> 63);

		/*
		 * Constant-time code to add 1 to v iff
		 *     r_hi < p_hi or (r_hi == p_hi and c is true)
		 * holds.
		 */
		c = (uint8_t)((uint16_t)(r_hi - p_hi - c) >> 15);
		v += c;
	}

	/*
	 * Multiply by two and apply the change in support:
	 * If parity = 0, then v = 0,2,4,...
	 * If parity = 1, then v = 1,3,5,...
	 */
	v = (v << 1) | parity;

	/*
	 * Apply the sign ('neg' flag). If neg = 0, this has no effect.
	 * However, if neg = 1, this changes v into -v = (~v) + 1.
	 */
	v = (v ^ -neg) + neg;
	return *(int8_t *)&v;
}

static inline int8_t
mkgauss_sign(prng *rng, uint8_t parity, unsigned logn)
{
	return (logn == 10)
		? mkgauss_sign_1024(rng, parity)
		: mkgauss_sign_512(rng, parity);
}
// ================================================================================


#define MAXLOGN (10)
#define MAXN MKN(MAXLOGN)

#define SMAX(x, y) (x) = (y) > (x) ? (y) : (x)
struct WorkerResult {
	long long iterations;

	long long sumt0, sumt1, sumt2, sqt0, sqt1, sqt2, max0, max1, max2;

	WorkerResult() : iterations(0), sumt0(0), sumt1(0), sumt2(0), sqt0(0), sqt1(0), sqt2(0), max0(0), max1(0), max2(0) {}

	void combine(const WorkerResult &res) {
		iterations += res.iterations;

		sumt0 += res.sumt0;
		sumt1 += res.sumt1;
		sumt2 += res.sumt2;

		sqt0 += res.sqt0;
		sqt1 += res.sqt1;
		sqt2 += res.sqt2;

		SMAX(max0, res.max0);
		SMAX(max1, res.max1);
		SMAX(max2, res.max2);
	}
};

const long long num_kg = 100, signs_per_kg = 10;

void print_poly(const int8_t *p, unsigned logn)
{
	size_t n, u;

	n = MKN(logn);
	printf("{ ");
	for (u = 0; u < n; u++) {
		if (u) printf(",");
		printf("%d", p[u]);
	}
	printf(" },\n");
}

std::mutex mx;


#define SECOND_HASH(h, logn) \
	((h) + ((logn) <= 3 ? 1u : 1u << ((logn) - 3)))

WorkerResult run(unsigned logn, const unsigned char *seed, size_t seed_len)
{
	union {
		uint8_t b[44 * MAXN];
		uint64_t dummy_u64;
		fpr dummy_fpr;
	} tmp;

	int8_t f[MAXN], g[MAXN], F[MAXN], G[MAXN];
	uint8_t h[MAXN/4];
	int16_t iq00[MAXN], iq01[MAXN];
	inner_shake256_context sc;
	WorkerResult res;

	// Initialize a RNG.
	inner_shake256_init(&sc);
	inner_shake256_inject(&sc, seed, seed_len);
	inner_shake256_flip(&sc);

	// Generate key pair.
	for (size_t kgnr = 0; kgnr < num_kg; kgnr++) {
		Zf(keygen)(&sc, f, g, F, G, iq00, iq01, logn, tmp.b);

		for (size_t rep = 0; rep < signs_per_kg; rep++) {
			unsigned n = MKN(logn), u;
			uint32_t *bf, *bg, *bF, *bG, *t0, *t1, *t2, *t3, *t4;
			prng rng;

			bf = (uint32_t *)tmp.b;
			bg = bf + n;
			bF = bg + n;
			bG = bF + n;

			t0 = bG + n;
			t1 = t0 + n;
			t2 = t1 + n;
			t3 = t2 + n;
			t4 = t3 + n;

			uint32_t p = PRIME, p0i = modp_ninv31(p), R2 = modp_R2(p, p0i);

			int8_to_ntt(bf, f, _gm, p, p0i, logn);
			int8_to_ntt(bg, g, _gm, p, p0i, logn);
			int8_to_ntt(bF, F, _gm, p, p0i, logn);
			int8_to_ntt(bG, G, _gm, p, p0i, logn);

			uint32_t norm;
			do {
				// Make a signature of a random message.
				inner_shake256_extract(&sc, h, sizeof h);
				Zf(prng_init)(&rng, &sc);

				hash_to_ntt(t0, h, _gm, R2, p, p0i, logn);
				hash_to_ntt(t1, SECOND_HASH(h, logn), _gm, R2, p, p0i, logn);

				for (u = 0; u < n; u++) {
					t2[u] = modp_add(modp_montymul(bf[u], t0[u], p, p0i), modp_montymul(bF[u], t1[u], p, p0i), p);
					t3[u] = modp_add(modp_montymul(bg[u], t0[u], p, p0i), modp_montymul(bG[u], t1[u], p, p0i), p);
				}

				// calculate B*h
				modp_iNTT2(t2, _igm, logn, p, p0i);
				modp_iNTT2(t3, _igm, logn, p, p0i);

				norm = 0;
				for (u = 0; u < n; u ++) {
					int x0 = mkgauss_sign(&rng, modp_norm(t2[u], p) & 1, logn);
					int x1 = mkgauss_sign(&rng, modp_norm(t3[u], p) & 1, logn);
					norm += x0 * x0 + x1 * x1;

					t0[u] = modp_set(x0, p);
					t1[u] = modp_set(x1, p);
				}
			} while (norm > L2BOUND(logn));

			modp_NTT2(t0, _gm, logn, p, p0i);
			modp_NTT2(t1, _gm, logn, p, p0i);

			for (u = 0; u < n; u++) {
				t0[u] = modp_montymul(t0[u], R2, p, p0i);
				t1[u] = modp_montymul(t1[u], R2, p, p0i);
				t4[u] = modp_sub(modp_montymul(bf[u], t1[u], p, p0i), modp_montymul(bg[u], t0[u], p, p0i), p);
			}
			modp_iNTT2(t4, _igm, logn, p, p0i);
			for (u = 0; u < n; u++) {
				long long x0 = modp_norm(t2[u], p), x1 = modp_norm(t3[u], p), x2 = modp_norm(t4[u], p);
				res.sumt0 += x0; res.sqt0 += x0 * x0;
				res.sumt1 += x1; res.sqt1 += x1 * x1;
				res.sumt2 += x2; res.sqt2 += x2 * x2;
				SMAX(res.max0, x0); SMAX(res.max0, -x0);
				SMAX(res.max1, x1); SMAX(res.max1, -x1);
				SMAX(res.max2, x2); SMAX(res.max2, -x2);
			}
		}
	}

	res.iterations = MKN(logn) * num_kg * signs_per_kg;
	return res;
}

WorkerResult tot;

void work(unsigned logn, const unsigned char *seed, int seed_len)
{
	WorkerResult result = run(logn, seed, seed_len);

	/* acquire mutex lock */ {
		std::lock_guard<std::mutex> guard(mx);
		tot.combine(result);
	}
}

int main() {
	unsigned char seed[48] = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
	inner_shake256_context sc;

	// Initialize a RNG.
	Zf(get_seed)(seed, sizeof seed);

	inner_shake256_init(&sc);
	inner_shake256_inject(&sc, seed, sizeof seed);
	inner_shake256_flip(&sc);

	const int nthreads = 4;
	std::thread* pool[nthreads-1];
	unsigned char seeds[nthreads * 48];

	inner_shake256_extract(&sc, seeds, nthreads * 48);

	time_t my_time = time(NULL);
	printf("%s", ctime(&my_time));
	fflush(stdout);

	for (unsigned logn = 7; logn <= MAXLOGN; logn++) {
		tot = WorkerResult();

		for (int i = 0; i < nthreads-1; i++) {
			pool[i] = new std::thread(work, logn, seeds + i * 48, 48);
		}
		work(logn, seeds + (nthreads - 1) * 48, 48);
		for (int i = 0; i < nthreads-1; i++) pool[i]->join(), delete pool[i];

#define SQ(x) ((x) * (x))
#define REPORT_VAR(sum, sq, max) \
	((double)sum / tot.iterations), \
	sqrt((double)sq / tot.iterations - SQ((double)sum / tot.iterations)), \
	((double)max)


		printf("# signs = %lld, # coeffs = %lld\n", tot.iterations >> logn, tot.iterations);
		// printf("%u: %lld/%lld ~ %.6f%% fails\n", logn, tot.fails, tot.iterations, 100.0 * tot.fails / tot.iterations);
		printf("%2u:  x0 ~ %6.2f +- %6.2f (<%6.2f), x1 ~ %6.2f +- %6.2f (<%6.2f), h1-2s1 ~ %6.2f +- %6.2f (<%6.2f)\n",
			logn, REPORT_VAR(tot.sumt0, tot.sqt0, tot.max0), REPORT_VAR(tot.sumt1, tot.sqt1, tot.max1), REPORT_VAR(tot.sumt2, tot.sqt2, tot.max2)
		);

		my_time = time(NULL);
		printf("%s", ctime(&my_time));
		fflush(stdout);
	}

	return 0;
}
